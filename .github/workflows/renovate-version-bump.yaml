name: Renovate Version Bump

on:
  pull_request:
    types:
      - opened
    branches:
      - main

jobs:
  version-bump:
    if: github.actor == 'renovate[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Parse PR body and bump versions
        run: |
          # Get PR body
          PR_BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body -q .body)
          echo "PR body: $PR_BODY"
          
          # Extract version changes using awk
          echo "$PR_BODY" | awk '
          BEGIN { FS="|"; in_table=0 }
          /\|.*Package.*\|.*Update.*\|.*Change.*\|/ { in_table=1; next }
          in_table && /^[-|]+$/ { next }
          in_table && NF>1 {
            # Clean up fields
            gsub(/^[[:space:]]+|[[:space:]]+$/, "", $2)  # Package name
            gsub(/^[[:space:]]+|[[:space:]]+$/, "", $3)  # Update type
            if ($2 != "") {
              # Remove any markdown links from package name
              gsub(/\[|\]|\(.*\)/, "", $2)
              print $2 "|" $3
            }
          }
          in_table && NF<=1 { in_table=0 }' > version_changes.txt
          
          # Process each chart
          while IFS='|' read -r package update_type; do
            echo "Processing $package with update type $update_type"
            
            # Find the chart directory
            chart_yaml="charts/$package/Chart.yaml"
            if [ ! -f "$chart_yaml" ]; then
              echo "Chart.yaml not found for $package"
              continue
            fi
            
            # Get current version
            current_version=$(grep "^version:" "$chart_yaml" | cut -d'"' -f2)
            echo "Current version: $current_version"
            
            # Split version into components
            IFS='.' read -r major minor patch <<< "$current_version"
            
            # Bump version based on update type from Renovate
            case $update_type in
              "major")
                new_version="$((major + 1)).0.0"
                ;;
              "minor")
                new_version="$major.$((minor + 1)).0"
                ;;
              "patch")
                new_version="$major.$minor.$((patch + 1))"
                ;;
              *)
                # Default to patch for safety
                new_version="$major.$minor.$((patch + 1))"
                ;;
            esac
            
            echo "New version: $new_version"
            
            # Update Chart.yaml with new version
            sed -i "s/^version:.*/version: \"$new_version\"/" "$chart_yaml"
            
            # Stage the changes
            git add "$chart_yaml"
          done < version_changes.txt
          
          # If there are changes, create a new commit
          if ! git diff --staged --quiet; then
            # Create a new commit with the version bump changes
            git commit -m "chore: bump chart versions based on dependency updates"
            
            # Push the new commit
            git push origin HEAD:${{ github.event.pull_request.head.ref }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 