name: Add Helm Chart
run-name: "Add ${{ github.event.inputs.chart_name }} chart v${{ github.event.inputs.chart_version }}"

on:
  workflow_dispatch:
    inputs:
      chart_repo_name:
        description: 'Helm repository name (e.g., external-dns)'
        required: true
      chart_repo_url:
        description: 'Helm repository URL (e.g., https://kubernetes-sigs.github.io/external-dns/)'
        required: true
      chart_name:
        description: 'Chart name (e.g., external-dns)'
        required: true
      chart_version:
        description: 'Chart version (e.g., 1.15.0)'
        required: true

jobs:
  add-chart:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
        with:
          version: v3.12.0

      - name: Add Helm repository
        run: |
          echo "Adding Helm repository ${{ github.event.inputs.chart_repo_name }} (${{ github.event.inputs.chart_repo_url }})"
          helm repo add ${{ github.event.inputs.chart_repo_name }} ${{ github.event.inputs.chart_repo_url }}
          helm repo update

      - name: Create New Chart
        working-directory: charts
        run: |
          mkdir -p ${{ github.event.inputs.chart_name }}

          # Create an empty values.yaml file
          touch ${{ github.event.inputs.chart_name }}/values.yaml

          # Create an empty README.md file
          touch ${{ github.event.inputs.chart_name }}/README.md

          # Create an empty Chart.yaml file
          touch ${{ github.event.inputs.chart_name }}/Chart.yaml

          # Add README content
          echo "# ${{ github.event.inputs.chart_name }}" >> ${{ github.event.inputs.chart_name }}/README.md
          echo "" >> ${{ github.event.inputs.chart_name }}/README.md
          echo "Parent chart for ${{ github.event.inputs.chart_name }}" >> ${{ github.event.inputs.chart_name }}/README.md
          echo "" >> ${{ github.event.inputs.chart_name }}/README.md

          # Add Chart.yaml content
          echo "apiVersion: v2" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          echo "name: ${{ github.event.inputs.chart_name }}" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          echo "# renovate: datasource=helm depName=${{ github.event.inputs.chart_name }} registryUrl=${{ github.event.inputs.chart_repo_url }}" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          echo "version: ${{ github.event.inputs.chart_version }}" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          echo "kubeVersion: '>=1.25.0-0'" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          echo "maintainers:" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          echo "  - name: ${{ github.actor }}" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          echo "    email: ${{ github.actor }}@users.noreply.github.com" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          echo "dependencies:" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          echo "  - name: ${{ github.event.inputs.chart_name }}" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          echo "    version: ${{ github.event.inputs.chart_version }}" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          echo "    repository: ${{ github.event.inputs.chart_repo_url }}" >> ${{ github.event.inputs.chart_name }}/Chart.yaml 

      - name: Test Chart
        working-directory: charts
        run: |
          helm dependency update ${{ github.event.inputs.chart_name }}
          helm lint ${{ github.event.inputs.chart_name }}
          ls -la ${{ github.event.inputs.chart_name }}

          # Extract the .tgz file to get the dependency's Chart.yaml
          tar -xzf ${{ github.event.inputs.chart_name }}/charts/*.tgz -C ${{ github.event.inputs.chart_name }}/charts
          
          # Get the icon from the dependency's Chart.yaml
          DESCRIPTION=$(yq e '.description' ${{ github.event.inputs.chart_name }}/charts/${{ github.event.inputs.chart_name }}/Chart.yaml)
          CHART_HOME=$(yq e '.home' ${{ github.event.inputs.chart_name }}/charts/${{ github.event.inputs.chart_name }}/Chart.yaml)
          ICON_URL=$(yq e '.icon' ${{ github.event.inputs.chart_name }}/charts/${{ github.event.inputs.chart_name }}/Chart.yaml)
          SOURCES=$(yq e '.sources[]' ${{ github.event.inputs.chart_name }}/charts/${{ github.event.inputs.chart_name }}/Chart.yaml)
          KEYWORDS=$(yq e '.keywords[]' ${{ github.event.inputs.chart_name }}/charts/${{ github.event.inputs.chart_name }}/Chart.yaml)

          # Add description to parent Chart.yaml if found
          if [ ! -z "$DESCRIPTION" ]; then
            echo "description: $DESCRIPTION" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          fi

          # Add home to parent Chart.yaml if found
          if [ ! -z "$CHART_HOME" ]; then
            echo "home: $CHART_HOME" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          fi
          
          # Add icon to parent Chart.yaml if found
          if [ ! -z "$ICON_URL" ]; then
            echo "icon: $ICON_URL" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
          fi

          # Add sources to parent Chart.yaml if found
          if [ ! -z "$SOURCES" ]; then
            echo "sources:" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
            echo "$SOURCES" | while read -r source; do
              echo "  - $source" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
            done
          fi

          # Add keywords to parent Chart.yaml if found
          if [ ! -z "$KEYWORDS" ]; then
            echo "keywords:" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
            echo "$KEYWORDS" | while read -r keyword; do
              echo "  - $keyword" >> ${{ github.event.inputs.chart_name }}/Chart.yaml
            done
          fi

          # Clean up extracted files
          rm -rf ${{ github.event.inputs.chart_name }}/charts
          rm -rf ${{ github.event.inputs.chart_name }}/Chart.lock


      # - name: Pull and untar chart
      #   working-directory: charts
      #   run: |
      #     echo "Pulling chart ${{ github.event.inputs.chart_name }} version ${{ github.event.inputs.chart_version }}"
          
      #     # Check if chart directory already exists
      #     if [ -d "${{ github.event.inputs.chart_name }}" ]; then
      #       echo "Warning: Chart directory already exists. Contents will be overwritten."
      #       # Remove existing directory to ensure clean extraction
      #       rm -rf "${{ github.event.inputs.chart_name }}"
      #     fi
          
      #     # Pull the chart
      #     helm pull ${{ github.event.inputs.repo_name }}/${{ github.event.inputs.chart_name }} \
      #       --untar \
      #       --version ${{ github.event.inputs.chart_version }}
          
      #     echo "Chart extracted to charts/${{ github.event.inputs.chart_name }}"

      - name: Update ct.yaml with new repository
        run: |
          echo "Checking if repository is already in ct.yaml"
          if ! grep -q "${{ github.event.inputs.chart_repo_name }}=${{ github.event.inputs.chart_repo_url }}" .github/linters/ct.yaml; then
            echo "Adding repository to ct.yaml"
            # Use yq to add the new repository to the chart-repos list
            yq -i '.chart-repos += ["${{ github.event.inputs.chart_repo_name }}=${{ github.event.inputs.chart_repo_url }}"]' .github/linters/ct.yaml
            echo "Repository added to ct.yaml"
          else
            echo "Repository already exists in ct.yaml"
          fi

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create branch and commit changes
        run: |
          BRANCH_NAME="add-chart-${{ github.event.inputs.chart_name }}-${{ github.event.inputs.chart_version }}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME
          
          git add charts/${{ github.event.inputs.chart_name }}
          git add .github/linters/ct.yaml
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 1
          fi
          
          git commit -m "feat(charts): add ${{ github.event.inputs.chart_name }} chart version ${{ github.event.inputs.chart_version }}"
          git push origin $BRANCH_NAME

      - name: Output PR creation instructions
        run: |
          # Create PR URL
          PR_URL="${{ github.server_url }}/${{ github.repository }}/compare/main...${{ env.BRANCH_NAME }}?expand=1"
          
          # Create job summary
          echo "# ðŸš€ Added ${{ github.event.inputs.chart_name }} Chart v${{ github.event.inputs.chart_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Chart Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart Name:** ${{ github.event.inputs.chart_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.event.inputs.chart_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** [${{ github.event.inputs.chart_repo_name }}](${{ github.event.inputs.chart_repo_url }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Create a Pull Request" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[Create PR]($PR_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
